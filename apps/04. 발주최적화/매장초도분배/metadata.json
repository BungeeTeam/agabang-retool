{
  "toolscriptVersion": "1.0.0",
  "version": "43.0.9",
  "pageUuid": "24dcec10-5880-11f0-956d-733263ad846d",
  "appTemplate": {
    "preloadedAppJavaScript": "function getPreviousChar(char) {\n    return String.fromCharCode(char.charCodeAt(0) - 1);\n}\n\nfunction groupBySum(arr, groupKeys, sumKeys) {\n  return Object.values(\n    arr.reduce((acc, item) => {\n      const key = groupKeys.map(k => item[k]).join(\"-\");\n\n      if (!acc[key]) {\n        acc[key] = Object.fromEntries(groupKeys.map(k => [k, item[k]]));\n        sumKeys.forEach(sumKey => {\n          acc[key][sumKey] = Number(item[sumKey]) || 0;\n        });\n      } else {\n        sumKeys.forEach(sumKey => {\n          acc[key][sumKey] += Number(item[sumKey]) || 0;\n        });\n      }\n      return acc;\n    }, {})\n  );\n}\n\nfunction pivotData(data, groupKeys, pivotKey, sumKeys) {\n  const pivotMap = {};\n\n  data.forEach(item => {\n    // Create a unique key based on selected group keys\n    const groupKey = groupKeys.map(k => item[k]).join(\"-\");\n\n    if (!pivotMap[groupKey]) {\n      // Initialize object with only group keys\n      pivotMap[groupKey] = Object.fromEntries(groupKeys.map(k => [k, item[k]]));\n    }\n\n    // Ensure numeric fields exist and sum them\n    sumKeys.forEach(sumKey => {\n      pivotMap[groupKey][item[pivotKey]] = \n        (pivotMap[groupKey][item[pivotKey]] || 0) + Number(item[sumKey] || 0);\n    });\n  });\n\n  return Object.values(pivotMap);\n}\n\nfunction getUniqueByKeys(arr, keys) {\n    const seen = new Set();\n    return arr.filter(item => {\n        const key = keys.map(k => item[k]).join('|');\n        if (seen.has(key)) {\n            return false;\n        }\n        seen.add(key);\n        return true;\n    });\n}\n\nfunction pivotData(data, groupKeys, pivotKey, sumKeys) {\n  const pivotMap = {};\n\n  data.forEach(item => {\n    // Create a unique key based on selected group keys\n    const groupKey = groupKeys.map(k => item[k]).join(\"-\");\n\n    if (!pivotMap[groupKey]) {\n      // Initialize object with only group keys\n      pivotMap[groupKey] = Object.fromEntries(groupKeys.map(k => [k, item[k]]));\n    }\n\n    // Ensure numeric fields exist and sum them\n    sumKeys.forEach(sumKey => {\n      pivotMap[groupKey][item[pivotKey]] = \n        (pivotMap[groupKey][item[pivotKey]] || 0) + Number(item[sumKey] || 0);\n    });\n  });\n\n  return Object.values(pivotMap);\n}",
    "pageCodeFolders": {
      "object": {
        "agabangPage": {
          "array": ["loadData", "distributionLogic", "ops"]
        },
        "ettoiPage": {
          "array": ["loadData", "distributionLogic", "ops"]
        }
      }
    },
    "rootScreen": "agabangPage",
    "isFetching": true,
    "shortlink": "shop-distribution",
    "version": "3.148.10",
    "experimentalDataTabEnabled": true
  }
}
